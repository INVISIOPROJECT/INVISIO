# -*- coding: utf-8 -*-
"""run_ner

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qbmFdEeU4WCZz-fdBplBA1fLl_idm7OM
"""

import json
import os
import pandas as pd
from datetime import datetime
from NERAnalyzer import NERAnalyzer
import utils  # استيراد دوال الرسم

INPUT_JSON_PATH = "input_texts.json"
OUTPUT_DIR = "results"
os.makedirs(OUTPUT_DIR, exist_ok=True)
OUTPUT_JSON_PATH = os.path.join(OUTPUT_DIR, "ner_results.json")
OUTPUT_CSV_PATH = os.path.join(OUTPUT_DIR, f"entity_counts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv")
OUTPUT_PLOT_PATH = os.path.join(OUTPUT_DIR, "entity_distribution.png")

def main():
    print("Loading input JSON file...")
    with open(INPUT_JSON_PATH, "r", encoding="utf-8") as f:
        input_data = json.load(f)

    texts = input_data.get("texts", [])
    if not texts or not isinstance(texts, list):
        print("Invalid or empty 'texts' list in input JSON.")
        return

    print(f"Running NER analysis on {len(texts)} texts...")
    analyzer = NERAnalyzer(model_dir="ner_trained_model_final")
    results_json = analyzer.analyze_batch_json({"texts": texts}, batch_size=16)
    results = results_json["results"]

    print(f"Saving detailed NER results to {OUTPUT_JSON_PATH} ...")
    with open(OUTPUT_JSON_PATH, "w", encoding="utf-8") as f:
        json.dump(results_json, f, ensure_ascii=False, indent=2)

    print("Processing entities and calculating counts...")

    entity_records = []
    for item in results:
        for ent in item.get("entities", []):
            entity_records.append({
                "text": item["text"],
                "entity": ent.get("entity_group") or ent.get("entity"),
                "word": ent.get("word"),
                "start": ent.get("start"),
                "end": ent.get("end")
            })

    df = pd.DataFrame(entity_records)

    if not df.empty:
        entity_counts = df["entity"].value_counts().reset_index()
        entity_counts.columns = ["Entity", "Count"]
        print("Entity counts:\n", entity_counts)
        entity_counts.to_csv(OUTPUT_CSV_PATH, index=False)
        print(f"Saved entity counts to {OUTPUT_CSV_PATH}")

        # استدعاء دوال الرسم من utils.py
        utils.plot_entity_distribution(entity_counts, output_path=OUTPUT_PLOT_PATH)
    else:
        print("No entities found.")

    print("NER analysis completed.")

if __name__ == "__main__":
    main()